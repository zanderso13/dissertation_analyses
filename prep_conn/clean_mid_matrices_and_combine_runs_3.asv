% I need to combine runs and apply exclusions. I will output single files
% that contain both runs of the MID matrices. 
basedir = '/projects/b1108/studies/brainmapd/data/processed/neuroimaging/mid_corr_matrices';
contrast = 'antgain'; % hitcongain
atl = fmri_data('/home/zaz3744/repo/dissertation_analyses/300_ROI_Set/ROIs_300inVol_MNI.nii');
savedir = '/projects/b1108/studies/brainmapd/data/processed/neuroimaging/mid_corr_matrices/final_corr_mats';

hyper = 0;

cd(basedir)

fnames1 = filenames(fullfile('*_run-1*'));
fnames2 = filenames(fullfile('*_run-2*'));
%load(fnames2{1});
dat = fmri_data('/projects/b1108/studies/brainmapd/data/processed/neuroimaging/beta_series/sub-10001/ses-2/gain_contrasts/run-1/beta_0001.nii');

for f = 1:length(fnames2)
    pid = fnames2{f}(1:5);
    fprintf(strcat('Working on: ',pid, '\n\n\n'))
    if sum(contains(fnames1(:),pid)) ==1
        % first, let's just look at all the brains I have both runs for
        m1.(strcat('sub',pid)) = load(fnames1{contains(fnames1(:),pid)});
        m2.(strcat('sub',pid)) = load(fnames2{f});       

        % this is where you can grab different seeds. here are the examples
        % you can use: corr_acc_wholebrain corr_ofc_wholebrain
        % corr_vs_wholebrain corr_amyg_wholebrain
        final_corr_vs_whole = m1.(strcat('sub',pid)).corr_vs_wholebrain; 
        final_corr_vs_whole2 = m2.(strcat('sub',pid)).corr_vs_wholebrain;
        if sum(isnan(final_corr_vs_whole))>=1
            final_corr_vs_whole(isnan(final_corr_vs_whole)) = 0;
        end
        if sum(isnan(final_corr_vs_whole2))>=1
            final_corr_vs_whole2(isnan(final_corr_vs_whole2)) = 0;
        end
        final_corr_vs_whole = (final_corr_vs_whole+final_corr_vs_whole2)./2;
        
        % whole seitzman atlas
        [m1.(strcat('sub',pid)).seitz_mat,m2.(strcat('sub',pid)).seitz_mat];

        % corr_amyg_wholebrain
        final_corr_amyg_whole = m1.(strcat('sub',pid)).corr_amyg_wholebrain; 
        final_corr_amyg_whole2 = m2.(strcat('sub',pid)).corr_amyg_wholebrain;
        if sum(isnan(final_corr_amyg_whole))>=1
            final_corr_amyg_whole(isnan(final_corr_amyg_whole)) = 0;
        end
        if sum(isnan(final_corr_amyg_whole2))>=1
            final_corr_amyg_whole2(isnan(final_corr_amyg_whole2)) = 0;
        end
        final_corr_amyg_whole = (final_corr_amyg_whole+final_corr_amyg_whole2)./2;

        % corr_acc_wholebrain
        final_corr_acc_whole = m1.(strcat('sub',pid)).corr_acc_wholebrain; 
        final_corr_acc_whole2 = m2.(strcat('sub',pid)).corr_acc_wholebrain;
        if sum(isnan(final_corr_acc_whole))>=1
            final_corr_acc_whole(isnan(final_corr_acc_whole)) = 0;
        end
        if sum(isnan(final_corr_acc_whole2))>=1
            final_corr_acc_whole2(isnan(final_corr_acc_whole2)) = 0;
        end
        final_corr_acc_whole = (final_corr_acc_whole+final_corr_acc_whole2)./2;

        % corr_ofc_wholebrain
        final_corr_ofc_whole = m1.(strcat('sub',pid)).corr_ofc_wholebrain; 
        final_corr_ofc_whole2 = m2.(strcat('sub',pid)).corr_ofc_wholebrain;
        if sum(isnan(final_corr_ofc_whole))>=1
            final_corr_ofc_whole(isnan(final_corr_ofc_whole)) = 0;
        end
        if sum(isnan(final_corr_ofc_whole2))>=1
            final_corr_ofc_whole2(isnan(final_corr_ofc_whole2)) = 0;
        end
        final_corr_ofc_whole = (final_corr_ofc_whole+final_corr_ofc_whole2)./2;

        % hyperalignent ones
        % acc
        final_corr_acc_voxel_to_region(:,:,1) = m1.(strcat('sub',pid)).corr_acc_voxel_to_region;
        final_corr_acc_voxel_to_region(:,:,2) = m2.(strcat('sub',pid)).corr_acc_voxel_to_region;
        final_corr_acc_voxel_to_region = mean(final_corr_acc_voxel_to_region,3);

        % ofc
        final_corr_ofc_voxel_to_region(:,:,1) = m1.(strcat('sub',pid)).corr_ofc_voxel_to_region;
        final_corr_ofc_voxel_to_region(:,:,2) = m2.(strcat('sub',pid)).corr_ofc_voxel_to_region;
        final_corr_ofc_voxel_to_region = mean(final_corr_ofc_voxel_to_region,3);

        % vs
        final_corr_vs_voxel_to_region(:,:,1) = m1.(strcat('sub',pid)).corr_vs_voxel_to_region;
        final_corr_vs_voxel_to_region(:,:,2) = m2.(strcat('sub',pid)).corr_vs_voxel_to_region;
        final_corr_vs_voxel_to_region = mean(final_corr_vs_voxel_to_region,3);

        % amyg
        final_corr_amyg_voxel_to_region(:,:,1) = m1.(strcat('sub',pid)).corr_vs_voxel_to_region;
        final_corr_amyg_voxel_to_region(:,:,2) = m2.(strcat('sub',pid)).corr_vs_voxel_to_region;
        final_corr_amyg_voxel_to_region = mean(final_corr_amyg_voxel_to_region,3);

        % save combined runs output
        save_fname = strcat(pid,'_final_ant.mat');
        save(fullfile(savedir,save_fname),"final_corr_amyg_voxel_to_region",...
            "final_corr_vs_voxel_to_region","final_corr_ofc_voxel_to_region","final_corr_acc_voxel_to_region",...
            "final_corr_vs_whole","final_corr_ofc_whole","final_corr_acc_whole","final_corr_amyg_whole")
    end
end



